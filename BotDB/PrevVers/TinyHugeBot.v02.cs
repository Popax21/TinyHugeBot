using ChessChallenge.API;
using static System.AppDomain;

class MyBot : IChessBot {
    //TinyBot_asmBuf either holds the TinyBot IChessBot instance, or the assembly buffer during decoding
    dynamic TinyBot_asmBuf = new byte[5120];
    int asmBufOff, scaleParity;
    byte scaleAccum;

    public MyBot() {
        //Decode the assembly
        //The assembly is encoded in a semi-RLE-like format
        //There are two types of tokens:
        // - scaling factors 0-15: regular tokens
        //   - the decimal integer number encodes 12 bytes, which are copied to the assembly buffer
        //   - the decimal scaling factor encodes an additional 4 bits - two regular tokens are paired up, and their scaling factors are combined to form an extra byte
        // - scaling factor 16: skip tokens (can skip up to 255 bytes forward to efficiently encode a stretch of zero bytes)
        //   - the lowest byte of the decimal integer number contains the amount of bytes to skip forward by
        //   - the remaining 11 integer number bytes are copied to the assembly buffer
        //   - skip tokens are invisible to the scalar accumulator; they don't contribute their scale value, nor do they affect parity
        // - the sign bit is unused as a minus sign would require an extra token
        foreach(decimal dec in new[] {
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> BEGIN ENCODED ASSEMBLY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            73786.976307732568653M,19807040628566.084401472995583M,31105283551.3167525259001891M,708264636672M,80686072090351756247264M,7737125245.5336267181203469M,73786978493861462528M,2417851639.2292583494124548M,41277563240262130762296328704M,7555786.3725983042899970M,1152921504606846992M,0.0000309237645936M,2065563099.6199888611716612M,9444732985530499727872M,0.0000412316868620M,1618827266.3567313005463705M,1099512001024M,944473.2966838802055477M,4M,73786976307723108354M,87045502973448454175457.28000M,124085333383021748944363256.65M,16789879495129.635880082618427M,3888968924959510842698.2699M,3735675636922410275.963688542M,2177299105698750064379298062M,5283081630183919098748.733445M,291860772327160308264762.82646M,3733210358562882263.197569621M,1239163373025157007043593485M,3117957284568468122470.520340M,186357762937239536875903.43446M,21821441986567.55153162732342M,527580450097892736482345062.9M,8413166099380026420139796.005M,10566111111358799029824068630M,8400963041777418217469118723M,1680075490136337061656128.1048M,7133875983913357796.519663698M,4951930643180038789327097363M,12109867325574867397572.233997M,528668014773382143154238698.6M,24831762825065573766219712.08M,3724733507449964044193629444M,77565533024260.08313817863698M,56229318623922287618440573.58M,1490735876589739.9750290785079M,136427281339042715487944763.27M,9906269825070387654.681572882M,123794028810.0533962967679235M,309485018035915393572274218M,3281478427590069775744504064M,37416802054631517062294414.06M,13902835820243012.57096500821M,3359969419401.6587688096105474M,7746825061475547289852.664324M,12585073499372396362375741.53M,44372457594041114323404019802M,288854101180982733734.0518400M,249080318155864220171012303.1M,137893138681.7596197873458M,6811106957175735285285.126656M,3590963584985367434145696410M,289197964803877104260746262M,11455781066991926680779849216M,5612561099359254253960330191.1M,309485149279821446810961.412M,26413038288381412927288331301M,309485149279909025562.106120M,273439881131730139347568.09765M,357013699527914212.63110M,279826557170298579663640.42497M,443728337418903039352.21925461M,662347081969667109.13303314439M,297219045347249909146441.71370M,662347081777478379.42887352207M,90936597166481665431842.58410M,4336776497411961296468859145M,77468312829956826365788.17041M,4336776497411961296468838754M,774683128299568263657881.7041M,23565595724116577341003079010M,2888541018824661537169409.550M,71290355581982947800250.67543M,12960589968000510352.42104844M,4222109230335815395116544M,623805723172798941481009668M,6808670232442441246074101790M,139028358202430.0942841663800M,3359969419401.6587688096105474M,7746825061475547289852.664324M,12585073499372396362375741.53M,44372829276337085868829661274M,196008598234579213116.6175232M,3094851492798214468162086.48M,78436194801191407578964.95948M,23565595724116577340987214178M,2903959520221265168688612.369M,312629020362915442835319.39680M,2981705520249379561.1695338840M,279757715950003200300878.41679M,91395507079146038.43290965M,226957099915307972715957478.4M,35701392106.782641969416M,74389235990669526254283.74785M,38203190927985128002.88606477M,14858907251981883726022778376M,264647115899259616509.5224064M,546052.4476227735847170M,3094851675633041151435407.46M,7737597482185168408857.82224M,166286358.6010869301380098M,12379402018577280981152924.16M,436568756650714400583.10983681M,1332004864636358752268923699.3M,356621767128375183287.02M,709058634774733440976097331.3M,313262876090151832538.7633514M,3094850098306579579818478.48M,2881988464956.4987419203281667M,456354216016185509198.32535041M,71254087808922071648554199.28M,3359274351618857859756431769.6M,185691008032780282646246090.3M,99808160088746525520.53090839M,272159425141008512696975582M,7434893790785343611603394560M,297905153297705.93660203696161M,59189008129078507672360.14800M,1303963445083519487836161M,653280648985879511592M,114812535.1148700940890115M,12379400410877208457743441920M,47223664830117989580.80M,34701308662525314308706935552M,680915440621438212505.6M,7149615631400421087502.235936M,33865152465824721.0369024035M,990352033490.0521293315645442M,40017444256.304186620117316M,0.0038482906972419M,9903520361345658305255907391M,2606746299254466108457582M,74276402357122816646051207942M,99035203604089095827.63565119M,10182602731505707909.122M,10831975343819134999407434502M,627661535.1549589524049926M,667327052802516632765527072M,0.0038938561218050M,40026888989.271029081653232M,0.0038482906972419M,13359891584853293775183224639M,26620877851437736652.64602134M,78918682226746.790196472184839M,19844555335614481107039289.599M,517580601511099712085053.09M,5261245240749842849706946587M,114926103556452029227.56M,2942108394034505010847242M,5128051038613843222282M,78957967593580.784645265168129M,38069253620271.492969511026687M,34357675891364222645934489611M,3820314355013678471890731.008M,4956595860421299459750685.9M,5446939567193520.3483052081222M,44770396767155845595139M,1547908619510091155742549.6943M,25659671530254375351046M,63110650150547603.4890695212M,328066199668191481334679.50459M,39689138643256.522947133149066M,991122446774.6160883962480387M,968594857109.6868897040301827M,68125190195785726666483558.58M,60076029778366812.24094746451M,28060121232057205735508585.05M,928455620413166775580098560M,217257744026732121566400.8704M,23529399578815059.678803983976M,681250020423080651608018237.6M,2171438980512419178414084.360M,1021300535568280763678290132.4M,682205853160.2961280161316867M,7143623009594134105268824.852M,589230444533735166900201506.4M,1804017783436339179.500843M,12406079888837298580955923456M,30130739580707640.58574848M,682932616145839154517881753.6M,714362662248392621321.4558570M,2727104341198294958704040840.8M,11404571121891865540170.004M,309470842793947598678723072M,27234680864422481235959417131M,3538573097679785185578781203M,426655847801006066176M,3229145217640908301132628009M,3115468874347060250597591552M,3118239979403149119967991585M,6836489899753014513026144.023M,2300694928990944128235734895M,3094850235345273191335660032M,588142885331073805114048897.9M,12123557040288218047017587478M,527704166854954205287081883.3M,295147905248626682975M,2723468086507099958268664452.3M,4972373603256631943081431.306M,34579767652899927686077597.11M,901500313137463082082107393.6M,3035741212852.7350194904238851M,15510627195342217110.006861843M,3115454135404460939889543.953M,528309748235528841366241776.8M,2734390468280661154328019227.3M,13938914700836439833582442527M,12095191472106630464.84753M,9922857685679432120489926656M,640745073576706949892800513M,66851149715856188862230M,1302497705608503979.1170851629M,42960539822658.657419694624800M,1570394695019.670720944147967M,5263748076539020036792521494M,5395440655306978639099.203624M,2757244820096.9367021037881858M,1905683084602588378686186756M,2187075215758580692308788736M,71230589057379715763440.30981M,2189841729017334482.163139854M,446140851107174468066349571M,8415375261990781876624621824M,18774715747856723617249380.01M,138884982728652852.93735952M,28458351215653742328121272.32M,638346205378620745274490880M,187748103947434091587462761.6M,309485035935075424791.6786520M,32811537994595286547529.942847M,590755285350673417230M,389625104883034483712813823M,16235873757427847516024471553M,4121131416130826286M,152489936099040803967488.000M,3600076726513150558111.1298560M,226157082343698464395.29M,1815809784177322098920M,4323935.2289071764341252M,18446768263821130240M,239807672971109072913M,30948501111838176142.4261120M,944473.2971236848566531M,9444732966838802055936M,649995967478.3782629263016197M,25393455852164182041296902M,25395872375638855923400714M,309606846977484837.1688771840M,3096554901841218402051426304M,12094017484546324425736682M,72583142575977284.64961691M,6622982046082704397629.7059584M,1813407320282305226872065M,1208944266640177860968580M,604479512355488387006465.6M,2475946193502960577977253888M,14545795465278207203045552896M,67699845903767477384380470M,76162326722134709259730.995M,928752538552793544949497.857M,1417113.4673875109954307M,14171134674426258278144M,2711671378835369885771M,177712095483355350584852481M,45494296443739304001257081088M,588021518660.7438669694370051M,169479462277053764120M,45600351631788083446246M,464680869.1237608811955714M,649919465105.3317061120394755M,37448611774014949974370961664M,51989934592016918348431385M,16442306105743576925477275.3M,526193938646926483207384371.2M,39924284100309825161193892096M,20554819633158783640338861M,205539710519.69145566265384M,49517681865048406049.719092224M,14855318264263747514230948096M,101549824187862583632527439M,19343019722969098066663.8430M,371382342351274568376.60573698M,47224025160648449.06498M,0.0001099511653131M,43.2345564227589383M,0.0000000000030729M,60689279440553590492389.744M,3573028148101443496742841.7877M,22689427592205904570785489.256M,36653787546382172794554.500864M,344326270285204427152031.28947M,3137814854981796777912463.8305M,357133699993101050921145109.53M,1225899479789966890853.45139M,224043251753854713749499039.89M,338565175029376031303561662.41M,307616148043430.15832250381650M,2611939684891471293400.3332197M,31387800544631306330.912613744M,27064568817293862953102.503757M,341461116466704774436.83677289M,23945743374162168132169.199460M,31357662833941877267.649621100M,2954179018716160126107473.5469M,32267959866566671.780144442981M,3138250733313377955983.9916901M,3385651750293760316459950.3199M,24880172473524289974731.753728M,34784892340634.913597249841523M,33551683654811894583307.233652M,34780098201213649.971484914537M,1335223542910363911106.32819M,1423685085753610999320264.2281M,338565175029376031862421184.99M,357374481183607.36491146933582M,1435892864280748339048096.7028M,32639119496868937011729296.751M,3015834252688196224034.7694435M,3139025690255621846263860.0041M,31386596378075601084332.401992M,140757021674825984428671.092M,3449113226028011717008355.7972M,20565582060244067214477391.215M,23643431639194951659720.569967M,37884620221776773912.949978227M,27969048501839675925682.340197M,2166395077496.896295835103842M,2477122061678034397759079424M,6576934432489686.26317166093M,2807163626619142924494046481M,12477485053672193648.45586440M,934636718089007201790008582M,1860560762247182261380.385809M,343941769841204268755032758.1M,248931541621979.4838624143371M,8977695959504043651702916616M,21736864049056624.78014416645M,38699830229615422179706883M,34140112372470517.30482503686M,21375116697143041375707734023M,65770773955190325414133889.7M,34819900750647300855044915.3M,7436253925636018061468762131M,2478335802600909647148421131M,18642157635869964526.33084424M,34544814088M
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  END ENCODED ASSEMBLY  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        }) {
            //Get the bits of the decimal
            var bits = decimal.GetBits(dec);

            //Skip forward if the highest scalar bit is set
            dynamic idx = bits[3] >> 16; //16 for skip tokens, <16 otherwise
            if(idx == 16) asmBufOff += (byte) bits[0];
            else {
                //Accumulate two 4 bit scales, then add to the buffer
                //Note that for even parity tokens, the byte we write here is immediately overwritten again 
                scaleAccum <<= 4;
                TinyBot_asmBuf[asmBufOff++] = scaleAccum |= idx;
                asmBufOff -= scaleParity ^= 1;
            }

            //Add the 88/96 bits of the integer number to the buffer
            idx >>= 4; //1 for skip tokens, 0 otherwise
            while(idx < 12) TinyBot_asmBuf[asmBufOff++] = (byte) (bits[idx / 4] >> idx++ * 8);
        }

        //Load the tiny bot from the assembly
        //We can't just load it and be done with it, because the byte[] overload doesn't add the assembly to the regular load path
        //As such load it whenever any assembly fails to load >:)
        System.ResolveEventHandler asmResolveCB = (_, _) => CurrentDomain.Load(TinyBot_asmBuf); //We can't use a dynamic variable for the callback because we need it to be a delegate type
        CurrentDomain.AssemblyResolve += asmResolveCB;
        TinyBot_asmBuf = CurrentDomain.CreateInstanceAndUnwrap("B", "e");
        CurrentDomain.AssemblyResolve -= asmResolveCB;
    }

    public Move Think(Board board, Timer timer) => TinyBot_asmBuf.Think(board, timer);
}